# Generated by Django 4.2.10 on 2025-03-31 09:08

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0002_enrollment_lessonprogress'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nome do local')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Endereço')),
                ('is_online', models.BooleanField(default=False, verbose_name='Online?')),
                ('meeting_link', models.URLField(blank=True, null=True, verbose_name='Link da reunião')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo?')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_locations', to=settings.AUTH_USER_MODEL, verbose_name='Criado por')),
            ],
            options={
                'verbose_name': 'Local de evento',
                'verbose_name_plural': 'Locais de eventos',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Título')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
                ('event_type', models.CharField(choices=[('CLASS', 'Aula regular'), ('WORKSHOP', 'Workshop'), ('EXAM', 'Avaliação'), ('MEETING', 'Reunião'), ('OTHER', 'Outro')], default='CLASS', max_length=20, verbose_name='Tipo de evento')),
                ('start_time', models.DateTimeField(verbose_name='Horário de início')),
                ('end_time', models.DateTimeField(verbose_name='Horário de término')),
                ('all_day', models.BooleanField(default=False, verbose_name='Dia inteiro?')),
                ('is_recurring', models.BooleanField(default=False, verbose_name='Recorrente?')),
                ('recurrence_rule', models.CharField(blank=True, max_length=200, verbose_name='Regra de recorrência')),
                ('color', models.CharField(default='#3788d8', max_length=20, verbose_name='Cor')),
                ('status', models.CharField(choices=[('SCHEDULED', 'Agendado'), ('CONFIRMED', 'Confirmado'), ('CANCELLED', 'Cancelado'), ('COMPLETED', 'Concluído')], default='SCHEDULED', max_length=20, verbose_name='Status')),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True, verbose_name='Máximo de participantes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='course_events', to='courses.course', verbose_name='Curso')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='scheduler.eventlocation', verbose_name='Local')),
                ('professor', models.ForeignKey(limit_choices_to={'user_type': 'PROFESSOR'}, on_delete=django.db.models.deletion.CASCADE, related_name='professor_events', to=settings.AUTH_USER_MODEL, verbose_name='Professor')),
            ],
            options={
                'verbose_name': 'Evento',
                'verbose_name_plural': 'Eventos',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='EventParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendance_status', models.CharField(choices=[('CONFIRMED', 'Confirmado'), ('PENDING', 'Pendente'), ('CANCELLED', 'Cancelado'), ('ATTENDED', 'Compareceu'), ('MISSED', 'Faltou')], default='PENDING', max_length=20, verbose_name='Status de presença')),
                ('notes', models.TextField(blank=True, verbose_name='Anotações')),
                ('confirmed_at', models.DateTimeField(blank=True, null=True, verbose_name='Confirmado em')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='scheduler.event', verbose_name='Evento')),
                ('student', models.ForeignKey(limit_choices_to={'user_type': 'STUDENT'}, on_delete=django.db.models.deletion.CASCADE, related_name='student_events', to=settings.AUTH_USER_MODEL, verbose_name='Aluno')),
            ],
            options={
                'verbose_name': 'Participante do evento',
                'verbose_name_plural': 'Participantes do evento',
                'ordering': ['event__start_time', 'student__first_name'],
                'indexes': [models.Index(fields=['event', 'attendance_status'], name='scheduler_e_event_i_714a5f_idx')],
                'unique_together': {('event', 'student')},
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['professor', 'start_time'], name='scheduler_e_profess_0a3061_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status'], name='scheduler_e_status_355131_idx'),
        ),
    ]
